
name: 'TF deploy to azure'

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

env:
  ROOT_PATH: '${{ github.workspace }}/terraform'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  KEY_NAME: ${{ secrets.KEY_NAME }} 
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}


jobs:
  terraform-plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="key=$KEY_NAME" -backend-config="access_key=$ACCESS_KEY" -backend-config="resource_group_name=$RESOURCE_GROUP"
      working-directory: ${{env.ROOT_PATH}}

   

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan 
      working-directory: ${{env.ROOT_PATH}}

  terraform-apply:
    name: 'Terraform apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="key=$KEY_NAME" -backend-config="access_key=$ACCESS_KEY" -backend-config="resource_group_name=$RESOURCE_GROUP"
      working-directory: ${{env.ROOT_PATH}}
     

   

    # Generates an execution plan for Terraform
    - name: Terraform Apply
      run: terraform apply --auto-approve 
      working-directory: ${{env.ROOT_PATH}}
    

